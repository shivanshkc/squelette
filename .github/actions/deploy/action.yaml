name: Deploy
description: Deploys the project.

inputs:
  service-account-key:
    description: |
      JSON formatted key for the service account.
      This can be obtained from the GCP console IAM page.
    required: true
  region:
    description: |
      Region for the deployment.
    required: true
  repository:
    description: |
      Name of the repository (GCP Artifacts Registry) where the docker image is present.
    required: true
  service_name:
    description: |
      Name of the service that will be displayed in Cloud Run.
    required: true

runs:
  using: composite
  steps:
    # Authenticate with Google Cloud.
    - name: Authenticate with Google Cloud.
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ inputs.service-account-key }}

    # Set up Google Cloud CLI.
    - name: Set up Google Cloud CLI.
      uses: google-github-actions/setup-gcloud@v2

    # Verify Google Cloud CLI installation.
    - name: Google Cloud CLI info.
      run: gcloud info
      shell: bash

    # Configure docker with credentials.
    - name: Configure docker with credentials.
      run: gcloud auth configure-docker ${{ inputs.region }}-docker.pkg.dev
      shell: bash

    # Build the docker image.
    - name: Build the docker image.
      run: docker build -f Containerfile -t ${{ inputs.service_name }}:${{ github.sha }} .
      shell: bash

    # Push the docker image.
    - name: Push the docker image.
      run: |
        project_id=$(echo '${{ inputs.service-account-key }}' | jq -r .project_id)

        docker tag ${{ inputs.service_name }}:${{ github.sha }} \
          ${{ inputs.region }}-docker.pkg.dev/$project_id/${{ inputs.repository }}/${{ inputs.service_name }}:${{ github.sha }}

        docker push \
          ${{ inputs.region }}-docker.pkg.dev/$project_id/${{ inputs.repository }}/${{ inputs.service_name }}:${{ github.sha }}
      shell: bash

    # Deploy to cloud run cost-effectively.
    - name: Deploy to cloud run.
      run: |
        project_id=$(echo '${{ inputs.service-account-key }}' | jq -r .project_id)
        service_account_email=$(echo '${{ inputs.service-account-key }}' | jq -r .client_email)

        gcloud run deploy ${{ inputs.service_name }} \
          --concurrency=80 \
          --min-instances=0 \
          --max-instances=1 \
          --memory=128Mi \
          --platform=managed \
          --port=8080 \
          --service-account=$service_account_email \
          --timeout=600 \
          --image=${{ inputs.region }}-docker.pkg.dev/$project_id/${{ inputs.repository }}/${{ inputs.service_name }}:${{ github.sha }} \
          --cpu-throttling \
          --region=${{ inputs.region }}
      shell: bash

    # Allow public access. Remove this step if public access is not intended.
    - name: Allow public access.
      run: |
        gcloud run services add-iam-policy-binding ${{ inputs.service_name }} \
          --region=${{ inputs.region }} \
          --member=allUsers \
          --role=roles/run.invoker
      shell: bash
